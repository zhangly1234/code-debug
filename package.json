{
	"name": "debug",
	"displayName": "Native Debug",
	"description": "GDB, LLDB & Mago-MI Debugger support for VSCode",
	"keywords": [
		"gdb",
		"lldb",
		"mago-mi",
		"native",
		"debug"
	],
	"license": "public domain",
	"version": "0.26.0",
	"publisher": "webfreak",
	"icon": "images/icon.png",
	"engines": {
		"vscode": "^1.55.0"
	},
	"main": "./out/src/frontend/extension",
	"activationEvents": [
		"onDebug"
	],
	"categories": [
		"Debuggers"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/WebFreak001/code-debug.git"
	},
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": true
		}
	},
	"contributes": {
		"menus": {
			"editor/title": [
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.removeDebugFile",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.setKernelInBreakpoints",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.setKernelOutBreakpoints",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.removeAllCliBreakpoints",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.goToKernel",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == rust",
					"command": "code-debug.disableCurrentSpaceBreakpoints",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "code-debug.registerSelectedSymbolInKernel",
					"group": "9_cutcopypaste"
				},
				{
					"command": "code-debug.registerSelectedSymbolInUserSpace",
					"group": "9_cutcopypaste"
				}
			]
		},
		"commands": [
			{
				"command": "code-debug.eBPFPanel",
				"title": "eBPF WebView",
				"category": "CoreDebugger"
			},
			{
				"command": "code-debug.examineMemoryLocation",
				"title": "Code-Debug: Examine memory location"
			},
			{
				"command": "core-debugger.startPanel",
				"title": "Start new core-debugger panel",
				"category": "CoreDebugger"
			},
			{
				"command": "core-debugger.updatePanel",
				"title": "update core-debugger panel",
				"category": "CoreDebugger"
			},
			{
				"command": "code-debug.removeDebugFile",
				"title": "Remove Debug File",
				"icon": {
					"dark": "images/remove-debug-file-dark.svg",
					"light": "images/remove-debug-file-light.svg"
				}
			},
			{
				"command": "code-debug.setKernelInBreakpoints",
				"title": "Set Kernel-In Breakpoints",
				"icon": {
					"dark": "images/set-kernel-in-out-breakpoints-dark.svg",
					"light": "images/set-kernel-in-out-breakpoints-light.svg"
				}
			},
			{
				"command": "code-debug.setKernelOutBreakpoints",
				"title": "Set Kernel-Out Breakpoints",
				"icon": {
					"dark": "images/set-kernel-in-out-breakpoints-dark.svg",
					"light": "images/set-kernel-in-out-breakpoints-light.svg"
				}
			},
			{
				"command": "code-debug.removeAllCliBreakpoints",
				"title": "Remove All Cli Breakpoints",
				"icon": {
					"dark": "images/remove-all-cli-breakpoints-dark.svg",
					"light": "images/remove-all-cli-breakpoints-light.svg"
				}
			},
			{
				"command": "code-debug.goToKernel",
				"title": "go to kernel ",
				"icon": {
					"dark": "images/update-all-spaces-breakpoints-info-dark.svg",
					"light": "images/update-all-spaces-breakpoints-info-light.svg"
				}
			},
			{
				"command": "code-debug.disableCurrentSpaceBreakpoints",
				"title": "Disable Current Space Breakpoints",
				"icon": {
					"dark": "images/disable-current-space-breakpoints-dark.svg",
					"light": "images/disable-current-space-breakpoints-light.svg"
				}
			},
			{
				"command": "code-debug.registerSelectedSymbolInUserSpace",
				"title": "Register Selected Symbol in User Space"
			},
			{
				"command": "code-debug.registerSelectedSymbolInKernel",
				"title": "Register Selected Symbol in Kernel"
			}
		],
		"breakpoints": [
			{
				"language": "c"
			},
			{
				"language": "cpp"
			},
			{
				"language": "rust"
			}
		],
		"debuggers": [
			{
				"type": "gdb",
				"program": "./out/src/gdb.js",
				"runtime": "node",
				"label": "GDB",
				"languages": [
					"c",
					"cpp",
					"rust"
				],
				"configurationAttributes": {
					"launch": {
						"required": [
							"target",
							"cwd"
						],
						"properties": {
							"target": {
								"type": "string",
								"description": "Path of executable"
							},
							"remote": {
								"type": "boolean",
								"description": "If true this will connect to a gdbserver instead of attaching to a PID",
								"default": false
							},
							"arguments": {
								"type": "string",
								"description": "Arguments to append after the executable. You can also use pipes."
							},
							"terminal": {
								"type": "string",
								"description": "Leave this field undefined to keep program output in the vscode console at the bottom. If this is set to empty string the program will spawn in a new console using x-terminal-emulator on linux, otherwise with the specified terminal. On windows setting this to an empty string spawns the program in a console, but no other console is supported."
							},
							"cwd": {
								"type": "string",
								"description": "project path"
							},
							"gdbpath": {
								"type": "string",
								"description": "Path to the gdb executable or the command if in PATH",
								"default": "gdb"
							},
							"env": {
								"type": "object",
								"description": "Environment overriding the gdb (and in turn also the process) environment",
								"default": null
							},
							"debugger_args": {
								"type": "array",
								"description": "Additional arguments to pass to GDB",
								"default": []
							},
							"pathSubstitutions": {
								"type": "object",
								"description": "Help GDB find your source using path substitutions (GDB `substitute-path)` variable",
								"default": {
									"<fromPath>": "<toPath>"
								}
							},
							"valuesFormatting": {
								"type": "string",
								"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
								"default": "parseText",
								"enum": [
									"disabled",
									"parseText",
									"prettyPrinters"
								]
							},
							"printCalls": {
								"type": "boolean",
								"description": "Prints all GDB calls to the console",
								"default": false
							},
							"showDevDebugOutput": {
								"type": "boolean",
								"description": "Prints all GDB responses to the console",
								"default": false
							},
							"executable": {
								"type": "string",
								"description": "Path of executable for debugging symbols"
							},
							"autorun": {
								"type": "array",
								"description": "GDB commands to run when starting to debug",
								"default": []
							},
							"stopAtEntry": {
								"type": [
									"boolean",
									"string"
								],
								"description": "Whether debugger should stop at application entry point",
								"default": false
							},
							"qemuPath": {
								"type": "string",
								"description": "Path to qemu executable",
								"default": "qemu-system-riscv64"
							},
							"qemuArgs": {
								"type": "array",
								"description": "Cmdline args which will be passed to qemu",
								"default": [
									"-M",
									"128m",
									"-machine",
									"virt",
									"-bios",
									"${userHome}/rCore-Tutorial-v3/bootloader/rustsbi-qemu.bin",
									"-display",
									"none",
									"-device",
									"loader,file=${userHome}/rCore-Tutorial-v3/os/target/riscv64gc-unknown-none-elf/release/os.bin,addr=0x80200000",
									"-drive",
									"file=${userHome}/rCore-Tutorial-v3/user/target/riscv64gc-unknown-none-elf/release/fs.img,if=none,format=raw,id=x0",
									"-device",
									"virtio-blk-device,drive=x0",
									"-device",
									"virtio-gpu-device",
									"-device",
									"virtio-keyboard-device",
									"-device",
									"virtio-mouse-device",
									"-serial",
									"stdio",
									"-s",
									"-S"
								]
							},
							"userSpaceDebuggeeFiles": {
								"type": "array",
								"description": "userspace executable name which will be debugged",
								"default": [
									"initproc"
								]
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"name": "Debug",
						"type": "gdb",
						"request": "launch",
						"target": "./bin/executable",
						"cwd": "${workspaceRoot}",
						"valuesFormatting": "parseText"
					}
				],
				"configurationSnippets": [
					{
						"label": "GDB: Launch Program",
						"description": "Starts the program using gdb",
						"body": {
							"type": "gdb",
							"request": "launch",
							"name": "${2:Launch Program}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Attach to PID",
						"description": "Attaches to a running program pid using gdb",
						"body": {
							"type": "gdb",
							"request": "attach",
							"name": "${2:Attach to PID}",
							"target": "${1:[PID]}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Connect to gdbserver",
						"description": "Connects to a gdbserver for debugging",
						"body": {
							"type": "gdb",
							"request": "attach",
							"name": "${3:Attach to gdbserver}",
							"executable": "${1:./bin/executable}",
							"target": ":${2:2345}",
							"remote": true,
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Launch over SSH",
						"description": "Remotely starts the program using gdb",
						"body": {
							"type": "gdb",
							"request": "launch",
							"name": "${6:Launch Program (SSH)}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"ssh": {
								"host": "${2:127.0.0.1}",
								"cwd": "${3:/tmp/working}",
								"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
								"user": "${5:remote_user}",
								"sourceFileMap": {
									"${6:/home/remote_user/project/}": "^\"\\${workspaceRoot}\""
								}
							},
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Launch GUI over SSH with X11 forwarding",
						"description": "Remotely starts the program using gdb with X11 forwarding",
						"body": {
							"type": "gdb",
							"request": "launch",
							"name": "${6:Launch Program (SSH + X11)}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"ssh": {
								"host": "${2:127.0.0.1}",
								"cwd": "${3:/home/remote_user/project/}",
								"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
								"user": "${5:remote_user}",
								"forwardX11": true,
								"x11host": "localhost",
								"x11port": 6000
							},
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Debug external embedded device",
						"description": "Debugs an embedded microcontroller supported by GDB by attaching over extended-remote",
						"body": {
							"type": "gdb",
							"request": "attach",
							"name": "${6:Debug Microcontroller}",
							"target": "extended-remote ${2:/dev/cu.usbmodem00000000}",
							"executable": "${1:./bin/executable.elf}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"autorun": [
								"monitor tpwr enable",
								"monitor swdp_scan",
								"attach 1",
								"load ${1:./bin/executable.elf}"
							]
						},
						"valuesFormatting": "parseText"
					}
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"test": "mocha",
		"coverage": "nyc npm test",
		"compile": "tsc -watch -p ./",
		"lint": "eslint . --ext .ts --format compact",
		"lint-and-fix": "eslint . --ext .ts --fix --format compact",
		"spellcheck-docs": "cspell lint **/*.md",
		"lint-docs": "markdownlint **/*.md",
		"prettier-write-docs": "prettier --write **/*.md",
		"prettier-check-docs": "prettier --check **/*.md"
	},
	"dependencies": {
		"ssh2": "^1.6.0",
		"vscode-debugadapter": "^1.45.0",
		"vscode-debugprotocol": "^1.45.0"
	},
	"devDependencies": {
		"@istanbuljs/nyc-config-typescript": "^1.0.2",
		"@types/mocha": "^5.2.6",
		"@types/node": "^11.15.54",
		"@types/vscode": "^1.55.0",
		"@typescript-eslint/eslint-plugin": "^5.22.0",
		"@typescript-eslint/parser": "^5.22.0",
		"cspell": "^6.0.0",
		"eslint": "^8.14.0",
		"eslint-plugin-deprecation": "^1.3.2",
		"eslint-plugin-no-null": "^1.0.2",
		"markdownlint-cli": "^0.31.1",
		"mocha": "^9.1.3",
		"nyc": "^15.1.0",
		"prettier": "^2.6.2",
		"ts-node": "^10.8.0",
		"typescript": "^3.9.3"
	},
	"__metadata": {
		"id": "2fd22b8e-b3b8-4e7f-9a28-a5e2d1bdd0d4",
		"publisherDisplayName": "WebFreak",
		"publisherId": "e054f80a-50f9-4d80-85c8-6ff87eef6c35"
	}
}
